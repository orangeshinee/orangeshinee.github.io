[{"content":"项目背景与目标 本项目 obsidian-weread-plugin-thino基于社区版 obsidian-weread-plugin 进行深度定制，旨在更好地服务于微信读书用户，尤其是需要将读书笔记同步到 Thino插件的非Pro用户。通过本插件，用户可以实现微信读书高亮、书评等内容的自动化同步、分类与标签化管理。\n主要功能改进 1. Thino 适配与推送格式优化 推送内容格式已适配 Thino 的 Memos 需求，支持 Pro 会员直接集成。 日记推送内容可自定义，满足不同平台的格式要求。 2. 自定义标签功能 支持在插件设置页自定义标签内容（如 #微信读书）。 标签可自动添加到每条日历推送（如 Thino/Memos 格式）引用行的前面，便于后续分类、检索和自动化处理。 3. 动态模板变量支持 自定义标签支持 nunjucks 模板语法，可引用如 {{metaData.title}}、{{metaData.author}} 等变量。 例如设置 #{{metaData.title}}，则每条推送内容会自动带上当前书名作为标签，实现更智能的内容标记。 核心代码修改说明 增加序章内容笔记解析 parseResponse.ts 1 2 3 4 5 6 7 8 // 提取序章笔记（如果存在） const bookReview = notebook.bookReview; const chapterReviews = (bookReview.chapterReviews || []) .flatMap((chapterReview) =\u0026gt; chapterReview.reviews || []) .filter((review) =\u0026gt; { const createTime = window.moment(review.created * 1000).format(\u0026#39;YYYYMMDD\u0026#39;); return today === createTime; }); 修改推送到日记的格式 fileManager.ts Thino是根据时间来渲染的，所以最后是 - 时间 #标签 blockId 格式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 private buildAppendContent(dailyNoteRefs: DailyNoteReferenece[]): string { const rawCustomTag = get(settingsStore).customTag; const appendContent = dailyNoteRefs .map((dailyNoteRef) =\u0026gt; { // 修改写入日记的格式，适配Thino // 格式为：- 12:00:00 ![[bookId#^refBlockId]] const metaData = dailyNoteRef.metaData; // 支持nunjucks模板渲染customTag const customTag = rawCustomTag ? nunjucks.renderString(rawCustomTag, { metaData }) : \u0026#39;\u0026#39;; const blockList = dailyNoteRef.refBlocks.map((refBlock) =\u0026gt; { const createTime = refBlock.createTime * 1000; const createDate = window.moment(createTime).format(\u0026#39;HH:mm:ss\u0026#39;); return `- ${createDate} ![[${this.getFileName(dailyNoteRef.metaData)}#^${ refBlock.refBlockId }]]`; return `- ${createDate} ${ customTag ? \u0026#39; \u0026#39; + customTag : \u0026#39;\u0026#39; } ![[${this.getFileName(metaData)}#^${refBlock.refBlockId}]]`;Add commentMore actions }); const bodyContent = blockList.join(\u0026#39;\\n\u0026#39;); return bodyContent; 增加自定义标签设置 增加一个新的customTag的设置项，用户可以自定义标签内容 增加对nunjucks模板渲染，这样在 [[#修改推送到日记的格式]] 可以将模板中的变量进行渲染，增加自定义程度； 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 private customTagSetting(): void {Add commentMore actions new Setting(this.containerEl) .setName(\u0026#39;自定义标签\u0026#39;) .setDesc( \u0026#39;为所有导出的笔记添加一个自定义标签，可用于分类或自动化处理，可以使用模板中的变量，例如{{metaData.title}}等，需要在前面加上metaData\u0026#39; ) .addText((input) =\u0026gt; { input .setPlaceholder(\u0026#39;如：#微信读书/{{metaData.title}}\u0026#39;) .setValue(get(settingsStore).customTag || \u0026#39;\u0026#39;) .onChange((value: string) =\u0026gt; { settingsStore.actions.setCustomTag(value); }); }); } 使用方法与实际效果 在插件设置页填写自定义标签内容（支持模板变量）。 同步微信读书笔记后，所有推送内容会自动带上自定义标签。 标签内容可根据书名、作者等动态变化，便于后续自动化处理。 实际效果截图：\n设置界面 日记显示 Thino显示 适用场景与价值 适合有微信读书高亮、书评等内容同步需求的 Obsidian 用户。 尤其适合需要将笔记推送到 Thino、Memos 等日历/知识管理平台的用户。 支持灵活标签与模板变量，极大提升内容的可检索性与自动化处理能力。 如你是 Thino Pro 会员，可参考这个例子直接集成，无需单独使用本插件。\n相关链接 obsidian-weread-plugin-thino - 本项目仓库 obsidian-weread-plugin - 社区版微信读书插件 Thino插件 - Thino官方插件 Thino Pro集成示例 - Thino Pro会员集成方案 ","date":"2025-06-18T09:45:25+08:00","image":"https://pics.shineee.site/2025/06/c88de1e3fd640dee2bfb915118576867.jpg","permalink":"https://blog.shineee.site/p/2025/06/18/obsidian-%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E6%8F%92%E4%BB%B6%E9%80%82%E9%85%8D-thino/","title":"Obsidian 微信读书插件适配 Thino"},{"content":"近日拜读了 guizang 老师关于 #Obsidian 的精彩博文（链接），不禁勾起了我与这款强大笔记软件的点滴回忆。曾几何时，我也曾希望借助 Obsidian 打造属于自己的知识宝库，然而那时浅尝辄止，笔记散落各处，未能成体系，实属憾事。\n在信息爆炸的时代，Readwise、Cubox、Flomo 等工具层出不穷，各具优势，却也让信息碎片化，分散在各个角落，检索整合颇为不便。痛定思痛，我决定重新出发，以 Obsidian 为核心，系统整合博客草稿、网页剪藏、读书笔记等各类信息流，构筑一座真正属于自己的知识殿堂。\n安装 Obsidian：万丈高楼平地起 第一步自然是迎接主角登场。从 Obsidian 官方网站下载最新版本进行安装，不再赘述。\n配置网页剪藏：信息输入的第一站 信息的高效输入，是知识管理的起点。参考 guizang 老师的经验，选择了OB 的官方网页剪藏工具，通过插件和配置的API接口，将网上的灵感、资料快捷地导入 Obsidian，确保信息流顺畅汇入知识库。\n搭建云端同步：多端无缝，数据无忧 为了实现多设备间的无缝切换与数据安全，稳妥的同步方案必不可少。我采用了 remotely-sync 插件，结合 OneDrive 云存储，实现笔记库的自动同步与备份。其实也可以用 cloudflare 的 R2 存储，不过我的 OneDrive 容量大，不用白不用。其次国内的同步速度还 OK。\n构建图片存储方案：图文并茂，行云流水 图片管理是 Obsidian 使用中常见的难题。为了获得更优体验，我选择了 Cloudflare R2 作为图床，并进行了以下配置：\n图床配置 相关文章比较多，不赘述，参考使用 Cloudflare R2 存储桶搭建图床 | Esing 的小站\n上传工具 摈弃图形界面的 PicGo App，转而使用更为轻便高效的 PicGo Core 命令行工具，简单高效。 官网链接\n全局安装 npm install picgo -g\n配置 R2 picgo core 本身不支持 S3 ，所以这里借助 picgo-plugin-s3 项目，在 PicGo Core 中配置好 Cloudflare R2 的访问凭证和存储桶信息。\n安装插件 picgo set uploader aws-s3\n参考配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \u0026#34;picBed\u0026#34;: { \u0026#34;uploader\u0026#34;: \u0026#34;aws-s3\u0026#34;, \u0026#34;current\u0026#34;: \u0026#34;aws-s3\u0026#34;, \u0026#34;aws-s3\u0026#34;: { \u0026#34;accessKeyID\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;secretAccessKey\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;bucketName\u0026#34;: \u0026#34;pics\u0026#34;, \u0026#34;uploadPath\u0026#34;: \u0026#34;{year}/{month}/{md5}.{extName}\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;auto\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;https://xxx.r2.cloudflarestorage.com\u0026#34;, \u0026#34;rejectUnauthorized\u0026#34;: false, \u0026#34;acl\u0026#34;: \u0026#34;public-read\u0026#34;, \u0026#34;pathStyleAccess\u0026#34;: true, \u0026#34;outputURLPattern\u0026#34;: \u0026#34;{protocol}://example.com/{path}\u0026#34; } }, \u0026#34;picgoPlugins\u0026#34;: { \u0026#34;picgo-plugin-s3\u0026#34;: true } } 配置完成后，可以测试下，看看地址是否与 R2 上的地址匹配，如果上传成功，但是生成的链接不一致，应该是 outputURLPattern 的设置问题，请参考项目文档进行修改； 自动上传 在 Obsidian 中安装 obsidian-image-auto-upload-plugin，实现复制粘贴图片时自动上传到 R2 图床，免去手动操作的繁琐。\n遇到个小坑 配置过程中，在 macOS 下遇到 PicGo 命令无法识别的情况。参考相关 Issue，将插件命令设置为\nexport PATH=\u0026quot;/opt/homebrew/bin:$PATH\u0026quot; \u0026amp;\u0026amp; /opt/homebrew/bin/picgo u，成功解决问题。\n尾声：重塑知识管理的起点 至此，Obsidian 的核心配置告一段落。这不仅是一场工具的升级，更是对个人知识管理体系的重塑。前路漫漫，唯有日拱一卒，方能将这片知识的土地耕耘成丰饶的园地，滋养心智，助力成长。未来，愿与 Obsidian 共同书写属于自己的精彩篇章。\n相关链接 guizang 老师 Obsidian 经验分享：\nhttps://mp.weixin.qq.com/s/VRQ_QWjuUqvJC8FeAZgvzw picgo-plugin-s3 插件：\nhttps://github.com/wayjam/picgo-plugin-s3/tree/main obsidian-image-auto-upload-plugin 插件：\nhttps://github.com/renmu123/obsidian-image-auto-upload-plugin PicGo 路径问题讨论：\nhttps://github.com/renmu123/obsidian-image-auto-upload-plugin/issues/20 ","date":"2024-04-08T10:00:00+08:00","image":"https://pics.shineee.site/2025/04/df4dc34e306b63b4bedb67135828f99b.png","permalink":"https://blog.shineee.site/p/2024/04/08/obsidian-%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5%E4%BB%8E%E9%85%8D%E7%BD%AE%E5%88%B0%E5%BA%94%E7%94%A8/","title":"Obsidian 个人知识库搭建实践：从配置到应用"},{"content":"前言 在使用Hugo搭建个人博客时，除了写文章，我还希望能有一个专门展示照片的地方。本文记录了为基于Stack主题的Hugo博客添加相册功能的完整实现过程，希望对有类似需求的朋友提供参考。\n功能需求 我对相册功能的需求很简单：\n首页展示不同的相册集合，每个相册有封面图和描述 点击相册进入详情页，展示该相册下的所有照片 照片支持懒加载，提高页面加载速度 支持照片点击查看大图和轻松浏览 实现思路 相册功能主要由以下几个部分组成：\n相册数据配置：使用YAML数据文件存储相册信息 相册列表页面：展示所有相册，使用CSS Grid布局 单个相册页面：展示特定相册中的照片，使用瀑布流布局 静态资源：照片文件按相册分类存储 具体实现 1. 创建相册入口页面 首先，在content/page/gallery/index.md中创建相册入口页面：\n1 2 3 4 5 6 7 8 9 10 11 12 13 --- title: \u0026#34;相册\u0026#34; description: \u0026#34;我的照片集合\u0026#34; slug: \u0026#34;gallery\u0026#34; layout: \u0026#34;gallery\u0026#34; menu: main: weight: 4 params: icon: image --- 这里收集了我的一些照片回忆，记录生活的美好瞬间。 2. 创建相册数据文件 在data/gallery.yaml中定义所有相册信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 - title: \u0026#34;今天的云\u0026#34; slug: \u0026#34;clouds\u0026#34; description: \u0026#34;记录下每天不同的云朵形状\u0026#34; cover: \u0026#34;/photos/clouds/cover.jpg\u0026#34; - title: \u0026#34;行东京\u0026#34; slug: \u0026#34;tokyo\u0026#34; description: \u0026#34;漫步在东京的街头巷尾\u0026#34; cover: \u0026#34;/photos/tokyo/cover.jpg\u0026#34; - title: \u0026#34;今天吃咩\u0026#34; slug: \u0026#34;food\u0026#34; description: \u0026#34;记录美食与生活\u0026#34; cover: \u0026#34;/photos/food/cover.jpg\u0026#34; 这里只需要配置相册的基本信息和封面图，实际照片将从对应文件夹中自动读取。\n3. 创建相册列表布局 在layouts/_default/gallery.html中实现相册列表页面：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 {{ define \u0026#34;main\u0026#34; }} \u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ with .Description }} \u0026lt;div class=\u0026#34;page-description\u0026#34;\u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;gallery-collections\u0026#34;\u0026gt; {{ range $idx, $album := .Site.Data.gallery }} {{ $albumPath := printf \u0026#34;./static/photos/%s\u0026#34; $album.slug }} {{ $photoCount := 0 }} {{ range readDir $albumPath }} {{ if findRE \u0026#34;(?i)\\\\.(gif|jpg|jpeg|tiff|png|bmp|webp|avif|jxl)$\u0026#34; .Name }} {{ if ne .Name \u0026#34;cover.jpg\u0026#34; }} {{ $photoCount = add $photoCount 1 }} {{ end }} {{ end }} {{ end }} \u0026lt;div class=\u0026#34;album-card\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/gallery/{{ $album.slug }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;album-cover\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ $album.cover }}\u0026#34; alt=\u0026#34;{{ $album.title }}的封面\u0026#34; loading=\u0026#34;lazy\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;album-info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{ $album.title }}\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;{{ $album.description }}\u0026lt;/p\u0026gt; \u0026lt;span class=\u0026#34;photo-count\u0026#34;\u0026gt;{{ $photoCount }} 张照片\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/section\u0026gt; {{ end }} 这个模板使用CSS Grid创建一个响应式的相册卡片网格，并自动计算每个相册中的照片数量。\n4. 创建单个相册页面 为每个相册创建对应的内容页面。例如，在content/gallery/clouds/index.md中：\n1 2 3 4 5 6 7 --- title: \u0026#34;今天的云\u0026#34; description: \u0026#34;记录下每天不同的云朵形状\u0026#34; date: 2024-04-02T10:00:00+08:00 albumSlug: \u0026#34;clouds\u0026#34; layout: \u0026#34;photos\u0026#34; --- 注意layout使用了photos，这个布局负责展示相册中的所有照片。\n5. 创建照片展示布局 在layouts/_default/photos.html中实现照片展示页面：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 {{ define \u0026#34;main\u0026#34; }} \u0026lt;div class=\u0026#34;gallery-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ with .Description }} \u0026lt;div class=\u0026#34;gallery-description\u0026#34;\u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;album-nav\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/gallery/\u0026#34; class=\u0026#34;back-to-albums\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M15 18l-6-6 6-6\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 返回相册列表 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;gallery-photos page\u0026#34;\u0026gt; {{ $albumSlug := .Params.albumSlug }} {{ $albumPath := printf \u0026#34;./static/photos/%s\u0026#34; $albumSlug }} {{ range (sort (readDir $albumPath) \u0026#34;Name\u0026#34; \u0026#34;asc\u0026#34;)}} {{ if ( .Name | findRE \u0026#34;(?i)\\\\.(gif|jpg|jpeg|tiff|png|bmp|webp|avif|jxl)$\u0026#34;) }} \u0026lt;div class=\u0026#34;gallery-photo\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;photo-img\u0026#34; loading=\u0026#39;lazy\u0026#39; decoding=\u0026#34;async\u0026#34; src=\u0026#34;/photos/{{ $albumSlug }}/{{ .Name }}\u0026#34; alt=\u0026#34;{{ .Name }}\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; {{ end }} 这个布局使用瀑布流展示照片，并支持照片懒加载和点击查看大图。\n6. 创建照片目录结构 照片文件按照以下结构组织：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static/ photos/ clouds/ cover.jpg # 相册封面 cloud1.jpg # 照片1 cloud2.jpg # 照片2 ... tokyo/ cover.jpg tokyo1.jpg ... food/ cover.jpg food1.jpg ... 每个相册都有自己的文件夹，封面图命名为cover.jpg，也可以根据你的需求自定义为其他照片，在gallery.yaml中修改即可。\n7. 更新菜单配置 在config/_default/menu.toml中添加相册菜单项：\n1 2 3 4 5 6 [[main]] identifier = \u0026#34;gallery\u0026#34; name = \u0026#34;相册\u0026#34; url = \u0026#34;/gallery/\u0026#34; [main.params] icon = \u0026#34;image\u0026#34; 优化与改进 在实现过程中，我遇到了一些问题并进行了优化：\n相对路径问题 最初使用{{ $.Site.BaseURL }}生成链接，但在局域网访问时会出现问题。改为使用相对路径/gallery/和/photos/解决了这个问题。\n照片数量计算 最初在YAML数据文件中定义每张照片，后改为直接读取文件夹中的照片：\n1 2 3 4 5 6 7 8 9 {{ $albumPath := printf \u0026#34;./static/photos/%s\u0026#34; $album.slug }} {{ $photoCount := 0 }} {{ range readDir $albumPath }} {{ if findRE \u0026#34;(?i)\\\\.(gif|jpg|jpeg|tiff|png|bmp|webp|avif|jxl)$\u0026#34; .Name }} {{ if ne .Name \u0026#34;cover.jpg\u0026#34; }} {{ $photoCount = add $photoCount 1 }} {{ end }} {{ end }} {{ end }} 大小写敏感的图片格式 添加(?i)标志使正则表达式大小写不敏感，支持.JPG和.jpg等不同大小写的文件扩展名：\n1 {{ if ( .Name | findRE \u0026#34;(?i)\\\\.(gif|jpg|jpeg|tiff|png|bmp|webp|avif|jxl)$\u0026#34;) }} 最终效果 实现了一个简洁美观的相册功能，主要特点：\n响应式设计，适应不同设备 图片懒加载，提高加载速度 照片瀑布流布局，充分利用屏幕空间 支持点击查看大图和轻松浏览 使用文件系统组织照片，便于管理 总结 通过自定义布局和数据文件，在Hugo博客中实现了功能完善的相册系统。整个实现过程展示了Hugo强大的模板功能和灵活性，不需要额外的插件或数据库支持，就能打造一个美观实用的相册功能。\n希望这篇文章对想要在Hugo博客中添加相册功能的朋友有所帮助！如有问题或改进建议，欢迎在评论区交流。\n功能优化与调整记录 在实现基本功能后，我根据实际使用情况对相册功能进行了一些优化和调整。以下是优化过程中的一些关键修改：\n1. 照片排序优化 最初实现中，相册中的照片是按照文件名降序（\u0026ldquo;desc\u0026rdquo;）排列的。但在实际使用过程中，我发现按照文件名升序（\u0026ldquo;asc\u0026rdquo;）排列更符合浏览习惯，特别是当照片按照时间顺序命名时。\n修改前：\n1 {{ range (sort (readDir $albumPath) \u0026#34;Name\u0026#34; \u0026#34;desc\u0026#34;)}} 修改后：\n1 {{ range (sort (readDir $albumPath) \u0026#34;Name\u0026#34; \u0026#34;asc\u0026#34;)}} 这样，照片就会按照文件名从小到大的顺序排列，通常对应时间的先后顺序，提供更好的浏览体验。\n2. 移除照片标题和时间显示 在早期版本中，我曾实现了从文件名中提取并显示照片标题和拍摄时间的功能：\n1 2 3 4 5 \u0026lt;div class=\u0026#34;gallery-photo\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;photo-img\u0026#34; loading=\u0026#39;lazy\u0026#39; decoding=\u0026#34;async\u0026#34; src=\u0026#34;/photos/{{ $albumSlug }}/{{ .Name }}\u0026#34; alt=\u0026#34;{{ .Name }}\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;photo-title\u0026#34;\u0026gt;{{ .Name | replaceRE \u0026#34;^[0-9 -]+(.*)[.].*\u0026#34; \u0026#34;$1\u0026#34;}}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;photo-time\u0026#34;\u0026gt;{{ .Name | replaceRE \u0026#34;^([0-9-]+).*[.].*\u0026#34; \u0026#34;$1\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 这要求我按照特定格式命名照片文件，如\u0026quot;2024-04-02-樱花.jpg\u0026quot;，其中\u0026quot;2024-04-02\u0026quot;会被提取为时间，\u0026ldquo;樱花\u0026quot;会被提取为标题。\n但在实际使用中，我发现这种命名方式有些繁琐，而且页面上显示这些信息会让相册页面显得过于拥挤。因此，我移除了这些显示元素，回归到更简洁的界面设计：\n1 2 3 \u0026lt;div class=\u0026#34;gallery-photo\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;photo-img\u0026#34; loading=\u0026#39;lazy\u0026#39; decoding=\u0026#34;async\u0026#34; src=\u0026#34;/photos/{{ $albumSlug }}/{{ .Name }}\u0026#34; alt=\u0026#34;{{ .Name }}\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; 3. 相册配置的灵活性 在data/gallery.yaml中，我为相册配置增加了更多灵活性。可以自定义封面图路径，不一定非要使用相册文件夹中的\u0026quot;cover.jpg\u0026rdquo;：\n1 2 3 4 - title: \u0026#34;今天的云\u0026#34; slug: \u0026#34;clouds\u0026#34; description: \u0026#34;记录下每天不同的云朵形状\u0026#34; cover: \u0026#34;/photos/clouds/best-cloud.jpg\u0026#34; # 可以指定任意图片作为封面 4. 文件命名建议 经过实践，我发现以下文件命名约定效果较好：\n相册文件夹：使用简短的英文单词，如\u0026quot;clouds\u0026quot;、\u0026ldquo;tokyo\u0026rdquo; 照片文件：使用日期前缀命名，如\u0026quot;2024-04-02-1.jpg\u0026quot;、\u0026ldquo;2024-04-02-2.jpg\u0026rdquo; 这种命名方式既保持了文件的良好组织，又便于按时间顺序浏览照片。\n5. 照片加载优化 为了进一步优化照片加载性能，我在img标签中增加了更多的属性：\n1 2 3 4 5 \u0026lt;img class=\u0026#34;photo-img\u0026#34; loading=\u0026#34;lazy\u0026#34; decoding=\u0026#34;async\u0026#34; src=\u0026#34;/photos/{{ $albumSlug }}/{{ .Name }}\u0026#34; alt=\u0026#34;{{ .Name }}\u0026#34; /\u0026gt; loading=\u0026quot;lazy\u0026quot;确保了图片只有在即将进入视口时才会加载，而decoding=\u0026quot;async\u0026quot;让浏览器可以异步解码图片，不阻塞主线程，提高页面响应速度。\n最终配置参考 以下是最终使用的相册配置和模板代码，供参考：\n相册数据配置（data/gallery.yaml）： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - title: \u0026#34;今天的云\u0026#34; slug: \u0026#34;clouds\u0026#34; description: \u0026#34;记录下每天不同的云朵形状\u0026#34; cover: \u0026#34;/photos/clouds/cover.jpg\u0026#34; - title: \u0026#34;行东京\u0026#34; slug: \u0026#34;tokyo\u0026#34; description: \u0026#34;漫步在东京的街头巷尾\u0026#34; cover: \u0026#34;/photos/tokyo/cover.jpg\u0026#34; - title: \u0026#34;今天吃咩\u0026#34; slug: \u0026#34;food\u0026#34; description: \u0026#34;记录美食与生活\u0026#34; cover: \u0026#34;/photos/food/cover.jpg\u0026#34; 照片显示模板（layouts/_default/photos.html）核心部分： 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;div class=\u0026#34;gallery-photos page\u0026#34;\u0026gt; {{ $albumSlug := .Params.albumSlug }} {{ $albumPath := printf \u0026#34;./static/photos/%s\u0026#34; $albumSlug }} {{ range (sort (readDir $albumPath) \u0026#34;Name\u0026#34; \u0026#34;asc\u0026#34;)}} {{ if ( .Name | findRE \u0026#34;(?i)\\\\.(gif|jpg|jpeg|tiff|png|bmp|webp|avif|jxl)$\u0026#34;) }} \u0026lt;div class=\u0026#34;gallery-photo\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;photo-img\u0026#34; loading=\u0026#39;lazy\u0026#39; decoding=\u0026#34;async\u0026#34; src=\u0026#34;/photos/{{ $albumSlug }}/{{ .Name }}\u0026#34; alt=\u0026#34;{{ .Name }}\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; 通过这些优化和调整，相册功能变得更加简洁、高效，提供了更好的用户体验。\n","date":"2024-04-02T11:00:00+08:00","image":"https://blog.shineee.site/p/2024/04/02/hugo-gallery-photo-custom/cover_hu_fcbdd8fd1ea35eb0.png","permalink":"https://blog.shineee.site/p/2024/04/02/hugo-gallery-photo-custom/","title":"Hugo博客相册功能实现"},{"content":"Hexo-Next 已经升级到8.x了，我还用的7.2，且8.0之后更改了许多东西，模板文件也从swig改成njk了，顺便动动吧；\n官方文档 官方升级文档\n如果之前没有对主题文件做过太多改动的话，工作量会比较小，只需要把themes文件下的_config.yml复制保留出来，然后clone最新的主题文件，再修改就OK了； 如果有更改（比如我，改了很多，且都是在原模板改的，就比较蛋疼，记得把对应文件调整就好；还好之前记录过自定义的内容） 后续的配置自定义文件也都分开来比较好，血的教训。\n评论系统 Next自带的不再支持Valine了，所以暂时改成了畅言，但畅言需要注册才能回复，所以后续还是改改（ {% note info %} 2022-05-22 更新，更改为utterances，使用Github的issues记录评论； {% endnote %}\n样式修复 8.0之后对html文件的一些class更改了，导致原先的一些自定义样式无法生效，已修正；\n后续TODO 相册图片点卡之后的链接暂未修复，点开仍是缩略图； 把SideBar的头图设置放到自定义文件里面; 更改域名+备案； ","date":"2022-05-04T20:55:38+08:00","permalink":"https://blog.shineee.site/p/2022/05/04/hexo-hext-update/","title":"Hexo升级之旅"},{"content":"突然想捡起来，把Hexo的东西整整，CI的自动部署关掉了，重新用GitHub的action来进行自动部署；\n首先 你需要知道Hexo部署的正常逻辑；\ngraph LR; a(本地源码更新)--\u003eb(HexoGenerate); b--\u003ec(生成静态文件); c--\u003ed(HexoDeploy); d--\u003ee(push到Github仓库) 大致逻辑上如上图所示，在Github仓库展示的（一般仓库名都是xxxx.orangeshinee.github.io）只是静态文件，不包含本地的源码，类似Themes主题文件等配置；\n而我们需要做的，就是把本地源码和最后要生成展示的静态文件分开保存，同时备份，这样在你更换电脑或者换了生产环境的时候，可以随时把源码pull下来继续更改，不用担心丢失问题；\n那么 Github Action是如何工作的？能解决什么问题？ 简单来说，就是能够监控你源码的更改状态，如果你的源码有更改，那么GA就会在线上帮你进行Hexo Generate和Hexo Deploy工作，不需要自己再手动部署； 同时，也分离了源码及静态文件，方便我们随时随地写文档；\ngraph LR; a(本地源码更新); z--\u003ea; a--\u003ez(源码仓库); b(HexoGenerate); a--\u003ef(GitAction监控); f--\u003eb; b--\u003ec(生成静态文件); c--\u003ed(HexoDeploy); d--\u003ee(push到Github仓库) 然后 1.新建仓库 假设你已经在本地部署过了，那么你的网站仓库已经有了； 接下来，我们新建一个仓库，把本地的源码上传上去，同时将这个仓库的属性改为个人可见（这步可选）；\n2.SSH配置 在本地打开git bash，然后运行 ssh-keygen -t ed25519 -C \u0026quot;your_email@example.com\u0026quot; -f ~/.ssh/hexo_key 会在本地生成一对公钥\u0026amp;密钥，公钥就是后缀为.pub的文件； 如果你是windows电脑，那么配置文件会在c://users/YourName/.ssh/文件夹中；\n公钥部署 右键用记事本先打开公钥，即后缀.pub的文件，复制； 打开静态文件仓库(xxxxx.github.io)，点击设置，将公钥粘贴进去； 私钥部署 同上，我们将私钥的文本内容复制，部署到源码仓库； 这里的位置与公钥不一样，私钥部署是在Secrets的Actions中，点击右上角添加私钥； 需要注意名称，我们将私钥名称设置为DEPLOY_KEY(也可以是其他名字)，在后续步骤会用到； 3.新建Action 然后转到Actions设置，点击New workflow新建一个工作流，会生成一个xxx.yml的文件，名字可随意；\n4.编辑配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # name为名称，可随意 name: HexoDeploy # 触发条件，这里只要你对仓库进行push，就会运行 on: [push] jobs: pages: # 运行环境，即Action的运行环境，我们默认选ubuntu，详情见(https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners) runs-on: ubuntu-latest # steps是步骤，我们总共进行了6步，需要更改的只有ssh配置那一步 steps: # 第一步，拉取你的源码，注意ref那里是不是你的仓库分支 - name: Checkout uses: actions/checkout@v2 with: ref: main # 更新node环境，这里要注意，node版本要和你的hexo适配，过高可能会有问题； # 可以在本地运行hexo -v，就能看到node版本 - name: Use Node.js 12.14.0 uses: actions/setup-node@v2 with: node-version: \u0026#34;12\u0026#34; # 更新包及缓存 - name: Cache NPM Dependencies uses: actions/cache@v2 with: path: node_modules key: ${{ runner.OS }}-npm-cache restore-keys: | ${{ runner.OS }}-npm-cache # 增加SSH KEY的配置 - name: Add SSH Private Key env: # 这里的DEPLOY_KEY就是上文进行添加的 SSH_PRIVATE: ${{ secrets.DEPLOY_KEY }} run: | mkdir -p ~/.ssh/ echo \u0026#34;$SSH_PRIVATE\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 700 -R ~/.ssh ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts git config --global user.email \u0026#34;你的邮箱\u0026#34; git config --global user.name \u0026#34;你的名称\u0026#34; # 安装包 - name: Install Dependencies run: | npm install hexo-cli -g npm install # 部署 - name: Hexo Deploy run: | hexo clean hexo deploy 编辑完成后保存；\n5.没病走两步 上述增加Actions的步骤是在Github网站进行的，你也可以在本地进行，就是在仓库根目录新建一个.github文件夹，然后在里面新建一个workflows文件夹，然后将xxx.yml文件放入；\n在本地更新一个文档，然后进行push；\n此时Actions页面会自动运行一个任务，点进去可以看到详情； 黄色代表运行中，绿色代表部署成功，红色表示部署失败；\n一些坑 Node.js的版本问题，这个前面说过了，建议与本地的版本一致； Hexo的版本问题，如果你的版本过低，有些配置会进行更改导致不再生效，需要用新的配置； 例如我这里的Deprecated config detected: \u0026quot;external_link\u0026quot; with a Boolean value is deprecated. See https://hexo.io/docs/configuration for more details.，就是指external_link的配置已经不再使用了，转为用external_link.enable: true这种配置； SSH的部署问题，如果发现部署失败，里面提到git@github.com: Permission denied (publickey).类似的，多半是因为私钥或者公钥没有部署好导致的，可以仔细看看上面的步骤； AND 以上，完成了自动部署的整体工作，自己也大概了解了action的逻辑，后面就可以少折腾了；\n参考：\nGitHub Actions 快速入门 - GitHub Docs 在 GitHub Pages 上部署 Hexo Hexo最速CICD部署，GitHub Actions！【最速攻略】 ","date":"2021-08-30T22:22:22+08:00","permalink":"https://blog.shineee.site/p/2021/08/30/hexo-github-action/","title":"Hexo-GitHub Actions 自动部署"},{"content":"第一天忘了在做什么了。2018的最后一天倒是记得很清楚。首爆盯着那几个数，到了晚上跟着老杨去旁边的一个海鲜馆子里吃🐟。\n好多鱼，认识的不认识的，味道记不得了,不过那个卤花生还是可以的。\n吃完回去继续等，和强哥一起。\n太无聊了，反正就和强哥两个人，跑到“作战会议室”，让办公室唯一能制热的空调吹起来，打开电脑，看强哥选的电影。\n《29+1》，香港电影，没仔细跟着看，大概讲的是，迎接和面对30岁到来的生活。\n反正一边看，一边盯着数。到了，零点过了，该有的不该有的都有了，凑够了了事。关机回家。\n出了公司后门到了大路上，平日这个点过马路都不用看，那晚上还有来来往往好多车。\n有没有好梦记不得了，总之就这样来到了2019年。\n我的2019 本命年，很糟糕的一年。\n从年头到年尾，好像就没遇到什么顺的事儿。\n一月递交辞呈，我不喜欢给自己留后路，事情要做了就去做，不然又会不了了之。很多事情也没有想好，反正到了那个点就要去做了。\n二月春节，新年，亲人突然病故，生死有命，很多人没了你才知道真的是没了，也有很多感觉是无法言说的。也是那个时候才切身体会到，自己还是个孩子啊，真的什么都做不了，又不想干站着。把一些东西搬过来搬过去，地扫了再扫。人一辈子太短了，还是要好好活着。平安是福。\n三月东京游，没有啥计划，走一天吃一天睡一晚，不好不坏。\n四月回汉找工作，处处碰壁，后来想才知道，当时的简历和方向错太多，过了节后的求职高峰。还是没啥经验。\n接下来的半年，学习，说是充电，实际上也没充多少，总是在最后的时候跳车。就那样了\n遇到好的工作好的机会，二选一总是选那个感觉错的那个。就很烦。\n颓了一年，感觉是个废人了。\nso 2020 不知道。就想安定下来，有固定的工作和生活。按部就班，做好自己的事，过好自己的生活。\n​一晃一个世纪的五分之一过去了，这20年，就对2013这个数印象最深了。大概是因为那一年高考，进了大学，有了新的不一样的生活。\n从哪儿看到这么一句话来着\n小时候总觉得一年很长很长，因为那一年占你记忆的五分之一六分之一；如今的一年越来越短，因为他占据你记忆不到二十分之一。\n越往后，你的每一天在你记忆中占得比例会越来越小越来越小。\n但不代表这一年，这一天的分量越来越小。对于往后的每一年的每一天，都要怀着最后一年的最后一天的信念去过。\n当然啦说起来好简单，反正臣妾做不到。\n新年 每次都说要有新气象，要过不一样的生活，总是踏出去的脚再收回来。\n好好过，少点遗憾。\n","date":"2019-12-31T22:00:47+08:00","permalink":"https://blog.shineee.site/p/2019/12/31/bye-my2019/","title":"我的2019"},{"content":"这一段内容并没有什么实质内容，只是想吐槽一下，周四（也就是立秋）这个框框还是VIP免费的今天就免费了，啧啧啧，秋天刚到呢为什么就免费了呢，不过还是挺好看的\n今早起来想去西苑吃个热干面，楼下几个大爷坐在公共椅子上日白，太阳还在云层后面，云层在大楼后面。随便来点小风就让人舒服的不得了。只是走到太阳下面就不舒服了，晒得后脖子疼。\n我以为收了西苑的摊子，热干面应该还是在的，结果并没有。只有有店面的还在营业，一半，原本摆摊的路停满了车，看不到什么人。失去灵魂。估计恢复要十一月了，不知道还有没有机会再吃一碗热干面。所以要珍惜你吃的每一碗热干面，说不定就是最后一碗了（\n最近老聊起长大、变化、巴拉巴拉，其实也才毕业两年，不过刚踏出脚步呀，滚了两圈扑了两层灰。等到有一天你\n在泥泞中寸步难行，会不会狠下心来把一旁的小猪猪按在面前爬出来呢的o(￣┰￣*)ゞ\n我随便说说的，我也不知道我以后是什么样子。大人只是小孩子的世界里才有的东西，我还是个孩子的(o′┏▽┓｀o) 珍惜小孩子眼里的世界\n很多故事的结局一开始就写好了的，只是我们看不到。但是老天爷并不是个好作家，好多好多事情他写不出来，也没有伏笔没有铺垫，想怎么开心怎么来吧，大概他这么想的。\n有时候去看一个人做的事，说的话，不要只是看他做的事，说的话。最近静下来想一些事情，翻翻脑子里的旧笔记本，总是想起很多很多小细节。\n我们之所以是我们，是因为我们有不同的人生，周围有不同的人，发生了不同的事，做了不同的选择。好好坏坏都有，有些你会忘记有些你会记得。我觉得从来都不曾有什么所谓的同理心，体会不了的就是体会不到。所以跟人说话聊天不要打着一副我tmd真的懂你，你做的事我都能理解。\n你TM懂个P啊。\n当然不是说就不要去聆听别人理解别人。听就好了。\n不要期望别人能够像你一样的去感受你的感受，谁都做不到。\n不过我还是会听讲故事，好的开心的，坏的难过的。我可能没法儿记住你讲的每一句话，每一件事，但是我记得说话时的你。\n所以，有什么故事就到这里讲吧，我喜欢听故事。\n听你讲故事。\n","date":"2019-08-11T22:29:16+08:00","permalink":"https://blog.shineee.site/p/2019/08/11/growupisbad/","title":"心有感慨·长大"},{"content":"今日立秋，早上起来吹吹风很舒服，昨天没有一直开风扇，开了空调，好像一直被风吹会头疼。\n醒来喉咙痛，也没有感冒的迹象，不晓得啥子原因。\n喉咙疼的很尴尬，你咽口水会疼，喝水也会疼，不舒服的让你不断地去咽口水不断地去喝水然后不断的刺激你的神经。\n就像伤口结疤一样，明知道不可以，还是要去抠抠。\n人多半是这样吧，其实只要不去想，脑子都不会在意疼不疼，那儿轮得到你来管。\n所以啊，有什么治嗓子的好办法？\n一叶知秋 落叶确实多了起来，早上再南湖大道看到有工人拿着类似大型吹风机的东西在行道树下面把叶子吹出来扫走，昨天暴雨也落了不少叶子。\n隔壁楼的一层大厅是一个羽毛球训练馆，每天中午下午都有不知道是不用上班还是提前下班的同志们在那里打球。当然小孩子是最多的，从暑假第一天开始，每天都有大大小小的孩子训练，老刻苦了。\n但是不得不说，训练还是很棒的，四五岁（真的很小，估计最小的就三岁多）的小姑娘打的比我还好，一招一式。\n从小都没啥爱好特长的我很羡慕，也不是没有机会，只是好像很难去坚持一件事情，大概是没那么热爱吧。\n昨天在电梯碰到一对小情侣遛猫的，长这么大第一次，见着人拉着根绳子遛猫，还是一直老肥老肥的猫🐱，我也不知道啥品种，咱也不敢问。\n倒是记得很清楚，小时候在看乌龙院四格漫画，里面那只叫墨汁的猫就被大师兄和小师弟牵出去遛过。 还是小学看的漫画啊，到现在都记忆犹新，回头有时间看看乌龙院大长篇吧。\n那时候不吃饭攒点钱买五块钱一本的单行本，还有附赠的卡片，结果后来全被弟弟们拿去扔了，就再也不看了。\n还有两个月，开始倒计时了，一周又晃晃悠悠过去了，听理论的东西要花很多精力让自己去听进去，偏偏面试理论的东西会问的特别多，到了实际工作又不怎么用。\n还是要好好学习啊小伙子\n","date":"2019-08-08T21:20:04+08:00","permalink":"https://blog.shineee.site/p/2019/08/08/autumnishere/","title":"心有感慨·立秋"},{"content":"夏天还是如印象中的一样，五点刚果天会慢慢睁眼，吃个饭会汗流浃背，午觉久了会昏昏沉沉，八九点搬个躺椅在室外乘凉看月亮看星星（如果有的话）。\n生活气是一个说起来有点抽象，但是讲出来呢，你又能get到具体点的那种词\n盖人家每日不可阙者，柴米油盐酱醋茶。——宋 吴自牧《梦粱录·鲞铺》\n所以住的地方一定要有厨房，偶尔做做饭，会让日子更有味道。因为你要去买菜，去超市或者菜市场是最让我感受「生活」的时候，推个小车或者拧着个小布袋子，看今天的白菜新不新鲜，挑挑拣拣，逢着超市打折就会很开心，其实也没省几毛钱，但是就是感觉很赚。\n然后洗菜，做饭，吃完，收拾碗筷，洗洗刷刷，躺倒沙发上喝一口茶，打开电视看看新闻电影；或者天气好跟你去广场散步，看放学的小孩儿们玩各式各样的游戏，看一旁的家长们坐着聊天，看远处的大爷大妈们随着低音炮的轰轰声翩翩起舞。不久的以后，我们也会成为他们的一员，生活也是个轮回，只是大家的圈子不一样。\n转眼2019已经过去了一半多，半年多好像真的什么事儿都没做，其实想想也确实什么都没做。过完年辞职，旅游，工作，学习。生活并没有跟想象中那般按部就班的进行，多一点点意外，少一点点惊喜。心里其实倒还有点期待，曾经想做的事情终究要成为现实，随之而来的就是那丢丢小惶恐，兴趣变成了工作究竟会成什么样子呢。平常心啦平常心，反正都是围城，享受生活就好。\n说起『围城』，想起过年回家在高铁上遇到的小师姐。在虎门上车，抱着本《围城》慢慢看，到了广州上来了个小姐姐坐在旁边，弄得我有点小紧张。\n你在看《围城》啊，这是我最喜欢的书，读了几遍了。\n啊对啊，还是高中时候看过，都快忘了，没事拿出来看看打发时间。\n然后就有一搭没一搭的聊着，居然，她也在武汉上的大学，还就是小破财的会院，跟我同年同月，比我早上学所以比我大一届，在深圳的一个咨询公司上班，家在哪儿哪儿。后来又聊了一些，工作啊，她还拿出电脑在学习，看着满屏英文的PPT我有点慌，毕竟她说的工作我都听不懂，感觉很吊\n中间她还解了几个工作电话，想来所有的社畜都一样啊，在哪里都离不开工作，于是看了看手机的刚发消息的微信群，右上角点了删除。。\n五个小时的车程还是长啊，临到车站目送她下车，不知道她的名字没有她的微信，其实我连她长什么样都没有记住😂\n人生如逆旅，希望多遇到几个有趣的同行人，听他讲看到的风景遇到的人经历的故事，到站了就挥手再见。旅途漫长，风景会很多。就像利群的老广告说的\n人生就像一场旅行，不在乎目的地，在乎的是沿途的风景，以及看风景的心情。\n明天就7月22号了，三伏天过完一伏，夏天好像也过了三分之一了。一天天的按部就班，只是还是不知道今后要去哪里。计划总是赶不上变化，一条微信一个电话一张车票，旅途的风景就又不一样了呀。\n早睡不一定能够早起，昨天十点多就上床睡觉，今天还是八点半才醒过来，也可能是前天睡太差，一直做梦，也不知道梦到什么了。\n昨天去了医院，医院真是个无论何时人都超多的地方，也是我最不愿意去的地方。给我就诊的医生小姐姐真好看，又年轻，用的居然还是锤子的Pro2S，真难得。花了189去检查，然后开了个9块5毛7的膏子给我，让我注意休息不要熬夜\n也好，说明我的脸并没什么大问题的，十块钱不到就能救回来。\n","date":"2019-07-21T23:00:47+08:00","permalink":"https://blog.shineee.site/p/2019/07/21/summer-2019/","title":"心有感慨·夏"},{"content":"不想拥有相册的blog不是好网站（\n关于next主题下的相册搭建网上教程挺多的，但是很多都是那种瀑布流式，emmmmm\u0026hellip;..\n不符合我审美，我还是喜欢QQ空间式的（逃－\nGoogle第一篇出来的是css+markdown 实现 hexo 相册【进阶篇】讲真的挺好看的，可能因为人家是自己画的 \u0026ndash;\n大体内容跟大佬的差不多，不过她用的是加载服务器上的图片，而我用的是图床。同时利用next已经整合的fancy box，达到点击图片放大查看的效果，而不是跳转到图片原页面。\n布局 1 2 3 - 相册页面 - 相册封面 - 相册内容 步骤 步骤的话与上述教程基本一致,只是修改了部分css样式,同时,因为要使得相册页面下的图片调用fancybox,需要修改\\next\\source\\js\\utils.js的部分代码\n1 2 3 4 5 // 如果是相册页面下的图片 启用fancybox if ($image.is(\u0026#39;.img-row img\u0026#39;)){ $imageGalleryLink.addClass(\u0026#39;post-gallery-img\u0026#39;); $imageGalleryLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;gallery\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;gallery\u0026#39;); } 修改缩略图 因为fancybox会自动生成缩略图,但实际上缩略图的src还是原图,所以加载的时候比较慢,这样也会造成资源浪费.所以还是在\\next\\source\\js\\utils.js中修改了下下,将缩略图地址转换为原图;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 wrapImageWithFancyBox: function() { document.querySelectorAll(\u0026#39;.post-body :not(a) \u0026gt; img, .post-body \u0026gt; img, .gallery-page \u0026gt; img\u0026#39;).forEach(element =\u0026gt; { var $image = $(element); var imageLink = $image.attr(\u0026#39;data-src\u0026#39;) || $image.attr(\u0026#39;src\u0026#39;); var $imageWrapLink = $image.wrap(`\u0026lt;a class=\u0026#34;fancybox fancybox.image\u0026#34; href=\u0026#34;${imageLink}\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/ImageObject\u0026#34; itemprop=\u0026#34;url\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;`).parent(\u0026#39;a\u0026#39;); // 将缩略图src换成原图src var $imageGalleryLink = $image.wrap(`\u0026lt;a class=\u0026#34;fancybox fancybox.image\u0026#34; href=\u0026#34;${imageLink.replace(\u0026#34;.th.\u0026#34;,\u0026#34;.\u0026#34;)}\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/ImageObject\u0026#34; itemprop=\u0026#34;url\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;`).parent(\u0026#39;a\u0026#39;); if ($image.is(\u0026#39;.post-gallery img\u0026#39;)) { $imageWrapLink.addClass(\u0026#39;post-gallery-img\u0026#39;); $imageWrapLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;gallery\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;gallery\u0026#39;); } else if ($image.is(\u0026#39;.group-picture img\u0026#39;)) { $imageWrapLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;group\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;group\u0026#39;); } else { $imageWrapLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;default\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;default\u0026#39;); } // 如果是相册页面下的图片 启用fancybox if ($image.is(\u0026#39;.img-row img\u0026#39;)){ $imageGalleryLink.addClass(\u0026#39;post-gallery-img\u0026#39;); $imageGalleryLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;gallery\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;gallery\u0026#39;); } 这里并不适用所有,因为我的图床是通过Chevereto自建的,在上传图片之后,会给你多个图片格式的链接,包括缩略图\\中等图以及原图,他们的格式是酱紫的:\n1 2 3 原图: xxx.jpg 中等: xxx.md.jpg 缩略图: xxx.th.jpg 所以,只要在相册内容页面的图片地址填入缩略图,然后utils.js中会将th.去掉,变成原图地址,这样点开之后就是原图了.写了一个简单的java来做这件事\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class TransUrl { public static void main(String[] args) throws IOException { FileInputStream fis = new FileInputStream(\u0026#34;url.txt\u0026#34;); BufferedReader bis = new BufferedReader(new InputStreamReader(fis)); List\u0026lt;String\u0026gt; strings = transUrl(bis); for (String str : strings) { System.out.print(str); } } private static List\u0026lt;String\u0026gt; transUrl(BufferedReader bis) throws IOException { String line = null; List\u0026lt;String\u0026gt; pics = new ArrayList\u0026lt;\u0026gt;(); while ((line = bis.readLine()) != null) { String pattern = \u0026#34;\u0026lt;img.*?\u0026gt;\u0026#34;; Pattern compile = Pattern.compile(\u0026#34;\u0026lt;img.*?\u0026gt;\u0026#34;); Matcher matcher = compile.matcher(line); while (matcher.find()) { String img = matcher.group(); pics.add(img); } } return pics; } } 路过图床也可以提供这种多格式链接,同时免费注册用户可以无限传图,对于小用户来说很棒啦,完全够用.\n页面布局 页面布局采用flex,这里有一篇详细介绍的\nhttps://zhuanlan.zhihu.com/p/25303493 简单来说,flex布局会让你的div按照你的需求,从左到右从上到下依次排列,同时还可以按照指定方式进行对齐;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /*gallery*/ .gallery-page { margin-top: -50px; } .gallery-column, .img-row { display: flex; flex-direction: row ; flex-wrap: wrap; justify-content: space-between; } .img-row a, .gallery-column a { border-bottom: 0px; } .gallery-item { margin-bottom: -50px } .gallery-item p { margin: -25px auto -10px; max-width: 50%; text-align: center; font-size: 15px; color: $black-deep; background: rgba(255,255,255,.3); border-radius: 7px; border: 1px solid $black-deep; box-shadow: 0 8px 20px -8px rgba(0,0,0,.3); } .posts-expand .post-body .gallery-column a img { height: 250px; width: 300px; object-fit: cover; } .posts-expand .post-body img { max-width: 180px; } @media (max-width: 767px){ .gallery-item p { min-width: 75px; font-size: 13px; } .posts-expand .post-body img { max-width: 150px; } 另外 如果嫌麻烦的话,图片直接放博客静态文件就好了,github暂时速度还是可以的,也不用担心流量问题;\n记录的很简陋,因为只要自己能看懂 - - ,到时候动手修改还能记起来改哪里- -\n具体的还是请参考:\ncss+markdown 实现 hexo 相册【进阶篇】\n","date":"2018-12-16T13:00:47+08:00","permalink":"https://blog.shineee.site/p/2018/12/16/custom-album/","title":"Hexo添加自定义相册"},{"content":"Next一直是Hexo最热门的主题,本站采用了Next的Pisces主题,然后根据其他大佬的美化教程进行适当修改,记录一下. 虽然不是前端,但是对前端一直有兴趣,相比后端,前端作品完成后给人的成就感来的更直接,看到写出来的东西可以立即展现确实是一直道不出的乐趣. 网站纯粹因为兴趣,我是个喜欢小细节让自己满意的人,只要认定了的就必须改,所以经常会因为一丢丢小地方达不到自己想要的而废寝忘食,没办法前端页面懂得不多,每次看一点忘一点.也不是没有收获~\n网站主页面 主页面是看到了 @iissnan 的主页。clone一下,稍稍加了个头像和背景.\n还有一个我很喜欢的是@zchen9的主页,可惜功力不够无法复刻（copy）\n博客首页 修改页面大小 Pisces主题的页面比较大,稍微小一点比较有紧凑感,更改了页面宽度,使得侧栏和主页面居中：\n1 2 3 4 5 6 7 8 .header { width: 960px } .container .main-inner { width: 960px; margin: 0 auto; } 侧栏网站logo 本来是title和subtitle,不好看,单改字体又没那种感觉,就自己ps了一个logo,然后在\\next\\layout\\_partials\\header\\brand.swig中修改了一下,将title换成了图片:\n1 2 3 4 5 6 7 \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;{{ config.root }}\u0026#34; class=\u0026#34;brand\u0026#34; rel=\u0026#34;start\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;logo-line-before\u0026#34;\u0026gt;\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;site-title\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;img.png\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;logo-line-after\u0026#34;\u0026gt;\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; 同时加了一个鼠标移动效果:\n1 2 3 4 5 6 7 8 9 10 11 .site-meta:hover { background: rgba(0,0,0,0.9); border-radius: 0 0 70px 70px; box-shadow: 0 8px 20px -3px rgba(0,0,0,0.6); } .site-meta { background: rgba(0,0,0,0.8); border-radius: 0 0 0 0; box-shadow: 0 2px 15px 0 rgba(0,0,0,0.6); transition: all 0.2s linear; } 自定义图标 图标来自阿里巴巴图标库,真的是好用的一皮.选择心仪的图标加入到你的项目中,然后就可以直接调用了.这里采用的是symbol引用\n这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个svg的集合，与上面两种相比具有如下特点：\n支持多色图标了，不再受单色限制。 通过一些技巧，支持像字体那样，通过font-size,color来调整样式。 兼容性较差，支持 ie9+,及现代浏览器。 浏览器渲染svg的性能一般，还不如png。 主要是因为它是彩色的,好看……o((≧▽≦o) ～\n在图标库选择好你的图标后，选择Symbol，复制css链接，加入到blog/source/data/head.swig中\n在styles.styl中加入.icon样式\n1 2 3 4 5 6 .icon { width: 20px; height: 20px; vertical-align: -4.5px; fill: currentColor; overflow: hidden; } 在\\next\\layout\\_partials\\header\\menu-item.swig中修改,将图标格式修改为svg\n1 2 3 4 {%- set menuText = __(\u0026#39;menu.\u0026#39; + name) | replace(\u0026#39;menu.\u0026#39;, \u0026#39;\u0026#39;) %} {%- if theme.menu_settings.icons %} {%- set menuIcon = \u0026#39;\u0026lt;svg class=\u0026#34;icon aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;use xlink:href=\u0026#34;#\u0026#39; + value.split(\u0026#39;||\u0026#39;)[1] | trim | default(\u0026#39;icon-zhizhuxia\u0026#39;) + \u0026#39;\u0026#34;\u0026gt;\u0026lt;/use\u0026gt;\u0026lt;/svg\u0026gt;\u0026lt;br\u0026gt;\u0026#39; %} {%- endif %} 这里参看阿里巴巴图标库的使用教程\n最后，在next\\_config.yml中将图标名称改成阿里图标库中的名称就可以了\n1 2 social: GitHub: https://github.com/xxx || icon-github-footer 侧栏中社交链接图标也是如此\n归档页面显示十二生肖 参考大佬的配置，然后在自己修改一下css就ok。\n其他细节 类似标签、背景动画、评论以及next主题自带原有的功能不再赘述，Google一下大把，最重要的还是要自己喜欢，同时能够在学习大佬的过程中不断提升自己。\n参考大佬 以下是在博客搭建和美化过程中搜到的大佬们，网站很棒内容很干，希望有一天也能成为大佬中的一员(不，你不想.jpg)\n@co5=Shioko\n@神代綺凜 这个博客是基于Typecho的，但是很多东西还是可以借鉴的嘛～\n@荷戟独彷徨 但是大佬已经转成Hugo了 - -\n长路漫漫，希望可以走的远一点。\n多写，多搜，多思考。\n","date":"2018-09-15T13:00:47+08:00","permalink":"https://blog.shineee.site/p/2018/09/15/hexo-next-customization/","title":"Hexo网站主题美化记录"},{"content":"最喜欢日剧的一点就是，每个人都能笑得很开心，说话的语调，夸张的表情，莫名的脑洞，中二的对白，睿智（的情节，将生活最平淡无奇的故事讲的那么温暖人心。\n不会有韩剧各种泡菜梗，也不会有国产剧窒息的剧情，日剧讲的故事就是生活中的柴米油盐，但是你闻着看着却像仙境佳肴。一个拥抱就能让你冰冻起来的心被初春的太阳暖着被三月的春风润着。让你知道，无论是什么生活无论是什么角色无论是什么处境，一切都会好起来。\n上个周末回家了一趟，来来回回飞了几千里地，也不敢多请几天假。也好，时间长了也有时间长的坏处。从机场回来的路上刷着B站，刚好看到《逃避可耻但有用》上线了，然后就花了一个星期追完了。\n昨天迎来了最终回，啊哈，就结束了。\n最喜欢日剧的一点就是，每个人都能笑得很开心，说话的语调，夸张的表情，莫名的脑洞，中二的对白，睿智（的情节，将生活最平淡无奇的故事讲的那么温暖人心。不会有韩剧各种泡菜梗，也不会有国产剧窒息的剧情，日剧讲的故事就是生活中的柴米油盐，但是你闻着看着却像仙境佳肴。一个拥抱就能让你冰冻起来的心被初春的太阳暖着被三月的春风润着。让你知道，无论是什么生活无论是什么角色无论是什么处境，一切都会好起来。\n故事讲的是，一个大龄职业单身程序猿和一个硕士毕业在家待业女之间进行契约结婚故事（伪）。\n契约结婚是一个新概念，粗暴的可以解释为每年过年淘宝就可以看到的租女友服务，契约结婚也是如此（个人理解就是为了某种需求而假结婚，并像对方支付一定劳动费用)。\n而与之相对的，就是事实婚姻，即\n双方未在结婚登记机关进行登记而以夫妻名义共同生活的事实。\n在国内的一些未发达地区，这种情况还是非常多的，但随着经济发展，这种情况也在逐渐减少。2001年《婚姻法》解释，事实婚姻为历时遗留问题，自1994年之后的所谓“事实婚姻”均无法律效应，只能被认定为“同居关系”。\n但是在日本，事实婚【事実婚】是很常见的，而且可以直接申请，更改住民票，不用更改户籍不用改姓，离婚也不会有离婚记录等等，但是无法获得配偶签证、伴侣无法成为法定继承人，也不适用一些专项税率的扣除减免balabala。\n在日本，事实婚还不属于主流，可以读一读渡边淳一的著作《在一起，不结婚》，讲了啥我也不知道因为我还没看但是搜事实婚出来的最多就是他的这本书豆瓣评分6.7应该不会差到哪里去就当了解风土人情了。\n好像从开头绕到婚姻扯了很远，这个改不了的一直是这样想到什么说什么不写稿子就是这样了本来没想写这么多的但是随便写写发现自己想的东西并不是那个样子啊就有点好奇了就要去google一下啊总不能瞎写啊虽然没人看但是还是要打破砂锅问到底有没有啊。\n这个星期知晓了两位高中同学在十一期间举办婚礼的消息，谈不下惊讶，只是有点感慨。今天部门工会活动，去了好多好多个小孩，真是可爱啊。又想起上上月去同事家里，同事妈妈跟我们唠嗑，【抱怨】着现在老一辈的辛苦，又要帮着带孩子又要做家务还得受气~\n现在的生活啊，不就是这样。既然想着更好的生活，就要有更多的付出，除了自己，还有家人。明了点就是money的问题，想要自己期望的好的生活，就需要更多的投入（金钱）。当然也是可以退一步，降低自己的生活水平，现在以及以后，看个人意愿吧，可以在大城市奋斗终身搏一席之地，也可以退一步到小城市海阔天空。\n一家之言，单身狗的想法总是不一样的，对于有些人来说，婚姻更像是一个动力源，会给你更多power和support，对于有些人来说，婚姻会让你有一个可以依靠可以倾诉的对象，会有一个一直支持你的人在你身边——角色不同，看到的自然也不同。\n所以啊，好好生活，生活是真真切切属于你的。无论是否结婚，都要开心健康的生活着。\n","date":"2018-09-01T22:22:22+08:00","permalink":"https://blog.shineee.site/p/2018/09/01/justwanttotalk/","title":"谈一个遥远的话题"},{"content":"最近一段时间天气挺好，晚上吹吹风好凉快。\n从岗前培训班回来已经一个月多了，又有一个月没更新公众号了╮(╯▽╰)╭\n时间好像错乱了一样，记不清一个月发生的事情哪个在前哪个在后。大概还是轮岗做的事情太少，想得太多。这一个月发生了很多事情，虽然可能平平淡淡没太多亮点，但是现在坐下来想想还是挺多值得回味的啊。\n以前呢，老想着毕业之后找一个普普通通的工作，当个普普通通的小白领，在普普通通的城市的一栋普普通通的写字楼里上普普通通的班。电视剧小说还有知乎看的太多可能就这个想法吧哈哈哈哈\u0026hellip;..\n现在也没差，毕竟还没有正儿八经的到岗正式上班，忙的日子还在后面呢。看其他兄弟公司的同部门的兄弟每个周末都跑跑跑，自己还是要好好珍惜现在所剩无几的可以浪的时光啊。\n好像跑题了。。\n上周去了深圳看了一场电影，回来在深圳北的检票口遇见一对情侣分别。看起来好像也是刚工作的毕业生，两人在快速通道的检票口依依不舍，男生要走女孩要留，一个默默流泪一个轻轻抚慰。单身狗的我在旁边看的心里满是感动，毕竟第一次在火车站近距离看到分离。\n悲莫悲兮生别离，乐莫乐兮新相知。\n别离别离，说到底还是不想离。毕业季老这样，俗套而又实实在在真真切切的情感。人嘛，就是这样咯。\n一个月前，和刚认识的未来老总们说再见； 两个月前，和相识四年的老铁们说再见，和不再回来的学生时光说再见。\n今天是2017年8月26日，B站首播《君の名は。》，一年前的8月26日电影在日本上映，我查了一下电影票，去年的12月2日，当时一个人去的光谷天地看的电影，后来又和少爷一起去看了一遍。都记不清那么久远的事情了。记不得了\n伤感的话不用说 忧愁的泪不用流 请往前走 不要回头\n又跑题了\n以后常有的事情\n人生如逆旅，我亦是行人。\n很高兴认识你们。\n","date":"2017-08-26T10:00:00+08:00","permalink":"https://blog.shineee.site/p/2017/08/26/sayonara/","title":"别离"},{"content":"到东莞已经一周。一直很懒，日记都不常写了。\n29号早早起来收拾了好久，什么能带的全带上了，好在东莞远，若是在武汉，我估计我会把整个宿舍搬空，一张纸都不剩。\n走的时候还好好的，已经送走了那么多人好像也没觉得有什么，散伙饭吃的喝的都好，不说离别伤感，尽是祝前程道未来。也好\n到东莞的高铁五个小时，自入岭南，风景就大不一样了。山变了，树变了，连云都变了。洲哥说这边天都更蓝了，我说兄弟你可拉倒吧别聊爆了。\n东莞地铁人不是那么多，两站之间离得比较远。下地铁之后拖着行李箱慢慢走到公司，不得不说东莞给我的第一印象非常好，我就喜欢宽宽的马路，自行车道都有标识而且在上面，很安全。到的那天刚好中午下过雨，下午天晴，空气温度都很棒。\n入住，整理，出门，觅食。公司周围万达、沃尔玛还有其他商区都挺近，骑着单车晃悠悠的荡着很惬意，如果不用流那么多汗的话(lll￢ω￢)。听着过往路人说着粤语，才会让你更加感觉到身在异乡。吃着口味奇淡啥菜都能蘸酱油的午饭时，才会觉得芝麻酱真是个好东西。\n一切都很陌生，一切都很新奇，好在有人陪。会有新的生活，新的朋友，新的身份。从不畏惧新环境，只是担心自己不去接受新的自己。\n在分公司三天的短暂培训结束，没有想象中那般严厉或者让人无法接受。有两位老总的话倒是让我很受触动，尤其开朝元老讲的，不讲政治正确，实事求是，又平易近人。听完之后对这个行业这个职业多一份理解和接受，少了些许不安和疑惑。然事事实实虚虚虚虚实实，他讲的生活未必是你的生活，还是要体验之后才能更加确认。\n过两天要参加省公司的培训，听说挺严的，考核不合格还会被放弃，然而我只关心那边伙食好不好，，，\n长路漫漫，不知能走多远。\n那就风雨兼程吧。\n","date":"2017-07-06T19:10:47+08:00","permalink":"https://blog.shineee.site/p/2017/07/06/seven-days-in-dongguan/","title":"东莞七日"},{"content":"昨天看到电影频道要播《入殓师》，想想好像很早的片子了，初中就说要看一直没看，电视上放的国语版不想听，还是听原声的好。\n（以下剧透。不过我觉得没什么可剧透的因为故事很简单，所有的情节台词套路你看到这一幕都能想到下一幕他要说啥做啥┑(￣Д ￣)┍）\n故事其实挺简单，讲述一个成年男子失业之后再就业的问题😶再就业期间由于家人及社会对其新职业产生的种种看法而产生冲突，但是后来男主还是爱上了这份工作并让家人和其他人也逐渐接受了这个职业。嗯就是这么个故事\n抛开入殓师这个特殊职业来看这片子剧情就是这样的呀我说的一点问题也没有的。\n谈到死亡多少有点畏惧，不过生在农村，从小到大，也见了不少葬礼。很小的时候不懂事，只觉得好玩，因为丧礼上会有许多敲锣打鼓的，而且很好听。会有道士来穿着大大的道袍做法事，又跳又唱，就是听不清唱的什么。葬礼的规矩也是特别多，各种主事的，鞭炮、挽联、蜡烛香火\u0026hellip;..\n家这边依旧是土葬，极少有火化的，一般是在外地去世才会火化，即使火化也会进行土葬。遗体及棺木会在灵堂放几天，到了日子便送上山入土。冬天还好，如果是夏天，遗体放久了就会有味道而且会有苍蝇蚊子之类的，所以现在也有了冰棺，等到要上山时才放到棺木里。\n我看过几次躺在里面的人，最近的是我爷爷去世的时候，想想也有六年了。快要合棺的时候才去看最后一眼。就看了一眼，脸上僵僵的，嘴是笑着的。那种笑真的让人觉得冷。\n说远了，回到电影吧。搜新闻看到很多人看了这个电影去做入殓师了，觉得很有仪式感很艺术而且也很高薪。电影表现的确实很美，一言一行细致入微，让人觉得躺在那里的仿佛仍旧在世。\n男主的工作就是为往生者整理妆容，让他们在最后一刻仍旧美丽，在最后一刻依旧被温柔相待。不过在国内，这个职业可能没那么多令人尊敬或者心怀敬意，更多的还是暴利。就跟医院的医生护士一样，生死看惯，麻木与否我不知道，但是对死者的敬意我见得不多。\n正值青春年少好像谈这些有点不太合适，不过 了解过死亡，才能更加体会到生的意义吧。\n我们每走一步都希望有一个好的结果，得到便成幸福。考试，升迁，结婚，但其实结果连同它得到的过程便连接成了一生。好的你要经过，不好的也是经过。所不同的是，你是否在感谢光明的同时依旧感激黑暗，你是否在难过的时候能一如既往地温暖和柔软？\n本片获第81届奥斯卡最佳外语奖。由泷田洋二郎执导，主演本木雅弘、广末凉子、山崎努等，音乐则由久石让负责。豆瓣评分8.8，很适合一个人在夜晚慢慢观赏，整个电影平淡而不失色彩，每个人看到的点都会不一样。亲情、工作、婚姻、生死，每一样都能给你不同的看法吧。\n愿你我都能被世界温柔相待。\n","date":"2017-06-12T14:00:47+08:00","permalink":"https://blog.shineee.site/p/2017/06/12/say-goodbye/","title":"送"},{"content":"昨天看到电影频道要播《入殓师》，想想好像很早的片子了，初中就说要看一直没看，电视上放的国语版不想听，还是听原声的好。\n（以下剧透。不过我觉得没什么可剧透的因为故事很简单，所有的情节台词套路你看到这一幕都能想到下一幕他要说啥做啥┑(￣Д ￣)┍）\n故事其实挺简单，讲述一个成年男子失业之后再就业的问题😶再就业期间由于家人及社会对其新职业产生的种种看法而产生冲突，但是后来男主还是爱上了这份工作并让家人和其他人也逐渐接受了这个职业。嗯就是这么个故事\n抛开入殓师这个特殊职业来看这片子剧情就是这样的呀我说的一点问题也没有的。\n谈到死亡多少有点畏惧，不过生在农村，从小到大，也见了不少葬礼。很小的时候不懂事，只觉得好玩，因为丧礼上会有许多敲锣打鼓的，而且很好听。会有道士来穿着大大的道袍做法事，又跳又唱，就是听不清唱的什么。葬礼的规矩也是特别多，各种主事的，鞭炮、挽联、蜡烛香火\u0026hellip;..\n家这边依旧是土葬，极少有火化的，一般是在外地去世才会火化，即使火化也会进行土葬。遗体及棺木会在灵堂放几天，到了日子便送上山入土。冬天还好，如果是夏天，遗体放久了就会有味道而且会有苍蝇蚊子之类的，所以现在也有了冰棺，等到要上山时才放到棺木里。\n我看过几次躺在里面的人，最近的是我爷爷去世的时候，想想也有六年了。快要合棺的时候才去看最后一眼。就看了一眼，脸上僵僵的，嘴是笑着的。那种笑真的让人觉得冷。\n说远了，回到电影吧。搜新闻看到很多人看了这个电影去做入殓师了，觉得很有仪式感很艺术而且也很高薪。电影表现的确实很美，一言一行细致入微，让人觉得躺在那里的仿佛仍旧在世。\n男主的工作就是为往生者整理妆容，让他们在最后一刻仍旧美丽，在最后一刻依旧被温柔相待。不过在国内，这个职业可能没那么多令人尊敬或者心怀敬意，更多的还是暴利。就跟医院的医生护士一样，生死看惯，麻木与否我不知道，但是对死者的敬意我见得不多。\n正值青春年少好像谈这些有点不太合适，不过 了解过死亡，才能更加体会到生的意义吧。\n我们每走一步都希望有一个好的结果，得到便成幸福。考试，升迁，结婚，但其实结果连同它得到的过程便连接成了一生。好的你要经过，不好的也是经过。所不同的是，你是否在感谢光明的同时依旧感激黑暗，你是否在难过的时候能一如既往地温暖和柔软？\n本片获第81届奥斯卡最佳外语奖。由泷田洋二郎执导，主演本木雅弘、广末凉子、山崎努等，音乐则由久石让负责。豆瓣评分8.8，很适合一个人在夜晚慢慢观赏，整个电影平淡而不失色彩，每个人看到的点都会不一样。亲情、工作、婚姻、生死，每一样都能给你不同的看法吧。\n愿你我都能被世界温柔相待。\n","date":"2017-06-12T14:00:47+08:00","permalink":"https://blog.shineee.site/p/2017/06/12/wish-you-be-loved-by-the-world/","title":"愿你我都能被世界温柔相待"},{"content":" 爬虫小练习。看妹子 ( ͡° ͜ʖ ͡°)\n主要步骤： 获取网页地址，找到图片地址所在标签\n用beautifulsoup解析出图片实际地址以及图片标题\n分析网页页面逻辑，找出最终页码\n写入循环，在每页将图片写入到本地\n主要代码 1 2 start_html = requests.get(baseUrl, headers= headers) content = start_html.content 这里用.content是为了避免网页编码和python编码不同而导致中文乱码问题，各个网站的编码都不一样，有些事utf-8,有些事GBK，还有其他的。这里可以避免编码影响。\n按F12，检查图片地址所在标签，见下图 右键-\u0026gt;copy selecter，可以看到，图片所在标签为\n1 div \u0026gt; div.ui-main \u0026gt; div:nth-child(9) \u0026gt; div.mala-text 所以在beautifulsoup中图片地址选择可以写成\n1 img_url = img_soup.find(\u0026#39;div\u0026#39;, class_=\u0026#39;ui-main\u0026#39;).find_all(\u0026#39;img\u0026#39;) 可以找出此页面所有img标签。同理可以找到图片标题。但是此处找到的是所在标签，打印出来的是\n1 2 3 \u0026lt;img alt=\u0026#34;美女\u0026#34; src=\u0026#34;http://wx4.sinaimg.cn/mw600/680f28e6gy1ffi9650prlj20dw0iidj6.jpg\u0026#34; style=\u0026#34;width: 350px; height: 466px;\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/miss/7159.html\u0026#34;\u0026gt;美女\u0026lt;/a\u0026gt; 所以声明一个新的变量来提取图片地址，同理得到标题\n1 2 imgs = img_url[\u0026#39;src\u0026#39;] #图片地址 name = titles.tet_text() 最后，找到页码标签， 可以看到末页标签是在page类下的最后一个，所以我们可以用\n1 2 3 4 maxPages = soup.find(\u0026#39;div\u0026#39;,class_=\u0026#39;page\u0026#39;).find_all(\u0026#39;a\u0026#39;)[-1][\u0026#39;href\u0026#39;] maxpage0 = re.findall(\u0026#39;\\d+\u0026#39;,maxPages) #最大页面值 maxpage = maxpage0[0] #最终页码 值类型为int soup找到的结果为一个数组，所以我们还要处理一下得到一个数字。\n最后，图片的写入以及文件夹的创建。因为每一页都有八张图（最后一页不一定，因此页面循环时不要循环到最后一页），所以每一页循环八次获取图片。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 path = str(page) #如果文件夹已经存在，再次创建会出错，所以这里用了一个if循环 if os.path.exists(\u0026#39;D:\\meizitu\\\\\u0026#39;+path): print(\u0026#39;文件夹已存在\u0026#39;) else: os.makedirs(os.path.join(\u0026#34;D:\\meizitu\u0026#34;,path)) #创建文件夹 os.chdir(\u0026#34;D:\\meizitu\\\\\u0026#34;+path) for i in range(0,8): name = titles[i].get_text() #图片标题 imgs = img_url[i][\u0026#39;src\u0026#39;] img = requests.get(imgs,headers=headers) #因为图片类型主要是JPG和GIF两种，所以这里也写一个if选择 if imgs[-3:] == \u0026#34;gif\u0026#34;: f = open(name+\u0026#39;.gif\u0026#39;,\u0026#39;ab\u0026#39;) f.write(img.content) f.close() else: f = open(name + \u0026#39;.jpg\u0026#39;, \u0026#39;ab\u0026#39;) f.write(img.content) f.close() 最终代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # -*- coding:utf-8 -*- # _author_:shineee import requests from bs4 import BeautifulSoup import os import re headers = {\u0026#39;User-Agent\u0026#39;:\u0026#34;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\u0026#34;} ##浏览器请求头（大部分网站没有这个请求头会报错、请务必加上） baseUrl = \u0026#39;http://www.qiubaichengren.com\u0026#39; start_html = requests.get(baseUrl, headers= headers) ##将原网页内容提取出来。避免编码不同造成中文乱码 content = start_html.content ##声明soup变量，然后找出图片地址 soup = BeautifulSoup(content, \u0026#39;lxml\u0026#39;) #末页 maxPages = soup.find(\u0026#39;div\u0026#39;,class_=\u0026#39;page\u0026#39;).find_all(\u0026#39;a\u0026#39;)[-1][\u0026#39;href\u0026#39;] maxpage0 = re.findall(\u0026#39;\\d+\u0026#39;,maxPages) #最大页面值 maxpage = maxpage0[0] #因为正则表达式出来的是数组，所以这里提取数组中的第一个数，也是唯一一个 for page in range(1,5):#这里5可以改成maxpage，但是太多了- -八百多页呢，喜欢的话自己可以慢慢等。。 page_url = baseUrl + \u0026#39;/\u0026#39; + str(page) + \u0026#39;.html\u0026#39; img_html = requests.get(page_url,headers= headers) img_soup = BeautifulSoup(img_html.content,\u0026#39;lxml\u0026#39;) img_url = img_soup.find(\u0026#39;div\u0026#39;, class_=\u0026#39;ui-main\u0026#39;).find_all(\u0026#39;img\u0026#39;) titles = img_soup.select(\u0026#39;div[class=\u0026#34;mtitle\u0026#34;]\u0026#39;) ##获取图片标题 path = str(page) if os.path.exists(\u0026#39;D:\\meizitu\\\\\u0026#39;+path): print(\u0026#39;文件夹已存在\u0026#39;) else: os.makedirs(os.path.join(\u0026#34;D:\\meizitu\u0026#34;,path)) #创建文件夹 os.chdir(\u0026#34;D:\\meizitu\\\\\u0026#34;+path) for i in range(0,8): name = titles[i].get_text() #图片标题 imgs = img_url[i][\u0026#39;src\u0026#39;] img = requests.get(imgs,headers=headers) if imgs[-3:] == \u0026#34;gif\u0026#34;: f = open(name+\u0026#39;.gif\u0026#39;,\u0026#39;ab\u0026#39;) f.write(img.content) f.close() else: f = open(name + \u0026#39;.jpg\u0026#39;, \u0026#39;ab\u0026#39;) f.write(img.content) f.close() print(\u0026#39;第\u0026#39;+str(page) +\u0026#39;页写入完成\u0026#39;) print(\u0026#39;写入完毕。\u0026#39;) ","date":"2016-11-10T10:00:47+08:00","permalink":"https://blog.shineee.site/p/2016/11/10/10762/","title":"python爬取网站图片"},{"content":"Chrome作为除IE之外大佬级别的存在,对于程序猿来说是不可缺失的.虽然它吃内存,耗电大,但是人们选择它必然有足够的理由.于我而言,更好的拓展性就是最吸引我的.\n不得不说,google的拓展插件让浏览器不再仅仅是浏览器,随着人们日常生活的需求增加,浏览网页也不再是单纯的浏览网页了\u0026ndash; 好怪异的话啊(\n工具只是工具,更好的使用工具才能让工具发挥出应有的潜力.简单讲讲我经常用的几款插件\n谷歌访问助手 https://github.com/haotian-wang/google-access-helper\n不必多说.\ncrxMouse Chrome Gesture ​ 一款手势插件，十分方便快捷，当然某些国产浏览器自带手势功能。这个插件功能非常多，除了基本的前进后退关闭等功能，还有额外的拖曳编辑等，并支持配置的导入导出以及云同步。\nGoogle翻译 官方出品，支持页面划词翻译和整个页面翻译。之前用有道，但是每次都要开软件，而且很不人性化，划词之后直接翻译了，不知道现在改了没有。这个插件在选词之后会出现一个图标，点击即可翻译。并且可以自选语言（当然啦，机翻嘛，效果你懂就好）\nOnenote Web Clipper 微软自家的插件，如果你是Onenote用户，这个插件必不可少。因为在 Microsoft Edge 中已经集成了Onenote的手机功能，在Edge中你可以直接将网页发送到Onenote，而且可以全页面截取，并且可以在上面进行修改编辑。但是Chrome上的插件功能更加全面，不仅支持页面截取，还\n甚至可以选中一段文字直接收集发送到Onenote，自带荧光笔\n就问你怕不怕咯\nuBlock origin 一款高效的网络请求过滤工具，占用极低的内存和 CPU。我用它代替了AdBlock，所以你知道它是做什么的咯。\n想必AdBlock，占用内存更小，嗯，主要是这点。。其实功能上都差不多了，现在许多网站（主要是视频网站）都反AdBlock了，虽然广告屏蔽了，但是你得看一段黑屏。尽管如此，也好过让我看那些奇葩页游的广告。(你的时间非常值钱(^_^)\nSimple Undo Close 相当于一个历史记录，点击之后会看到刚刚关闭的网页，相当于撤销吧。许多国产浏览器也是自带的有\nIE Tab IE作为默认浏览器那么多年，终于也随着Win10 Edge的出现退出了舞台，でも，很多网站是基于ie内核浏览器建立的，要求你使用ie内核的浏览器才能正常工作，比如网银什么的。而且，学校的官网，必须让你用IE，还是IE8.0，这就很伤了。什么年代了你让我去哪儿给你找ie8- - 这个插件在运行之前会自动弹出一个下载，点击保存之后运行就能正常使用了\nExtensions Manager (aka Switcher) 管理插件的插件。很可能你是个插件达人，下载了好多好多拓展，但是很多你平常都用不到，如果一直开着是十分占内存的，删掉又没必要，所以这款管理插件十分贴人心。简洁明了占内存小，除了管理拓展之外还可以管理Chrome主题。（讲真我每次换以前的主题都要重新到WebStroe搜索真的好烦躁。。）\n","date":"2016-10-17T23:00:47+08:00","permalink":"https://blog.shineee.site/p/2016/10/17/good-chrome-extensions/","title":"常用的Chrome拓展"},{"content":"前日，瑞典学院授予 Bob Dylan 诺贝尔文学奖，表彰其“在美国歌曲传统中创造了新的诗歌表达”(having created new poetic expressions within the great American song tradition.)。\nBob Dylan (1941.5.24－)，美国唱作人、艺术家和作家。从1961年发布首张专辑至今，迪伦在流行音乐界和文化界起到的影响已超过50年。他的大多数著名作品都来自1960年代的反抗民谣，也被广泛认为是当时美国新兴的反叛文化的代言人，尽管他否认了这一点。\n高中的时候，政治老师在课堂上给我们播放了关于 Bob Dylan 的一期凤凰的访谈节目\u0026ndash;《环球人物周刊》，那时高一，2011年，正值 Bob Dylan 在华举行演唱会，那是他首次在华登台演出。老爷子那时都70岁了，一把吉他一把口琴。片头的自我介绍深入人心\n我不想引领时代，却是美国民权运动的代言人；\n我不是作家，却屡次获诺贝尔文学奖提名；\n所有堆积如山的头衔都不是我，\n我有且只有一个名字\u0026mdash;-Bob Dylan\n1963年8月28日，马丁路德金在华盛顿林肯纪念堂发表了撼动世界的演讲《I Have a Dream》。之后， Bob Dylan 在浩瀚的人群中演唱了他刚创作不久的歌曲《Blowin\u0026rsquo; in the Wind》。他与马丁路德金一样，发出了时代的强音。\n如果说猫王给摇滚以形式，那么 Bob 给摇滚以灵魂。\n相比村上春树、阿多尼斯等热门得奖候选作家来说，文学界对于鲍勃·迪伦得奖颇感意外，但这次并非实鲍勃·迪伦首次与诺奖触电。\n早在1996年，戈登·鲍尔代表竞选委员会为鲍勃·迪伦正式提名诺贝尔文学奖，他向媒体宣读艾伦·金斯伯格的推荐信：“虽然他作为一个音乐家而闻名，但如果忽略了他在文学上非凡的成就，那么这将是一个巨大的错误。事实上，音乐和诗是联系着的，迪伦先生的作品异常重要地帮助我们恢复了这至关重要的联系。”\n文学是面向每个人的内心，还是面向看上去更大写的现实，这是诺贝尔文学奖历史上的永恒困境。无论怎样，Bob Dylan 的成就获奖并不过分。虽然村上春树可能。。。。并不伤心，因为他也是迪伦的粉丝，在他的作品里，很多地方都体现出了他对这位老者的热爱。所以迪伦获奖，作为粉丝的他，心底里应该也是十分高兴的吧。\n昔日我曾老去，\n如今我风华正茂。\n愿迪伦，永远年轻。\n遇见她就像是走进了《一千零一夜》。\n她的微笑照亮了一整条熙熙攘攘的街。\n她就像是罗丹的雕塑被赋予生命。\n——迪伦这样描述对初恋情人苏西的一见钟情。\n","date":"2016-10-15T13:00:47+08:00","permalink":"https://blog.shineee.site/p/2016/10/15/iamyoungerthanthatnow/","title":"炮弹要飞多远才会停止"},{"content":"最近在用Hexo配置好博客的主页面后，又想来倒持一下来弄个好看的真·主页。后来在各个Hexo的主题下面，看到了@iissnan的主页。很好看，就去clone下来了，稍微稍微加工了一下。\n因为github.io绑定的域名是blog.shineee.site。所以新建了一个repo然后在主页面新建CNAME指向真主页域名shineee.win就可以了。\n在dnspod解析里面，加上一个blog的指向github.io就ok。\n","date":"2016-10-10T10:00:47+08:00","permalink":"https://blog.shineee.site/p/2016/10/10/github-pages-secend-name/","title":"关于绑定github pages二级域名"},{"content":"之前在知乎上面看到许多用Python爬虫做的有趣项目，于是也去学习了一番（入门）。看到很多教程都有关于贴吧爬虫的小例子，于是自己也跟着做了一遍。\n可能是教程时间有点早了，多数都是两三年前的，基本都是用正则表达式来提取关键信息，而且还专门写了一个类来处理各种HTML标签。正则表达式并不难学，但是要真正弄清除却很耗时间，尤其对于新手来说，读懂正则表达式是一件很头疼的事，写出正确的表达式更头疼。\n后来学习了requests和beautiful soup两个库，那感觉，仿佛春风拂过泸沽湖,秋雨浸润九寨沟。怎一个爽字了得。\n关于requests和beautiful soup两个库的教程网上有很多，我看的是崔庆才的博客,内容十分全面，里面的Python爬虫教程也十分适合入门学习。\n在其原有的贴吧爬虫代码的基础上，我将提取内容的正则表达式全部替换成了用beautiful soup来获取网页标签内容。\n简单来说，Beautiful Soup是python的一个库，最主要的功能是从网页抓取数据。官方解释如下：\nBeautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。\nBeautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。\nBeautiful Soup已成为和lxml、html6lib一样出色的python解释器，为用户灵活地提供不同的解析策略或强劲的速度。\n上代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 #-*- coding: UTF-8 -*- #__author__shineee #__time__2016.10__ #__Python27__ import requests import re from bs4 import BeautifulSoup from itertools import chain import string import sys reload(sys) sys.setdefaultencoding(\u0026#39;utf-8\u0026#39;) class Tieba: def __init__(self, baseUrl, seeLZ): # base链接地址 self.baseURL = baseUrl # 是否只看楼主 self.seeLZ = \u0026#39;?see_lz=\u0026#39; + str(seeLZ) # 全局file变量，文件写入操作对象 self.file = None #默认的标题，如果没有成功获取到标题的话则会用这个标题 self.defaultTitle = u\u0026#34;百度贴吧\u0026#34; def getPage(self, pageNum): try: # 构建URL url = self.baseURL + self.seeLZ + \u0026#39;\u0026amp;pn=\u0026#39; + str(pageNum) response = requests.get(url).text.encode(\u0026#39;utf-8\u0026#39;) # 返回UTF-8格式编码内容 return response.replace(\u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\\n\u0026#39;) # 无法连接，报错 except ValueError as e: if hasattr(e, \u0026#34;reason\u0026#34;): print u\u0026#34;连接百度贴吧失败,错误原因\u0026#34;, e.reason return None # 获取帖子标题 def getTitle(self, page): #新建soup对象 soup = BeautifulSoup(page) #获取标题 title = unicode(soup.h3.string) if title: # 如果存在，则返回标题 # 若文件名中有/符号则替换掉 否则写入文件时会出错 return title.replace(\u0026#39;/\u0026#39;, \u0026#39; \u0026#39;) else: return None # 获取帖子一共有多少页 def getPageNum(self, page): soup = BeautifulSoup(page) #利用soup的select规则找出帖子总页码数 page = soup.select(\u0026#39;li[style=\u0026#34;margin-left:8px\u0026#34;]\u0026#39;) for ii in page: nums = ii.get_text() break num = re.findall(r\u0026#39;[0-9]+(?=[^0-9]*$)\u0026#39;, nums) result = \u0026#39;\u0026#39;.join(num) if result: return result else: return None def setFileTitle(self, title): # 如果标题不是为None，即成功获取到标题 if title is not None: self.file = open(title + \u0026#34;.txt\u0026#34;, \u0026#34;w+\u0026#34;) else: self.file = open(self.defaultTitle + \u0026#34;.txt\u0026#34;, \u0026#34;w+\u0026#34;) # 获取每一层楼的内容,传入页面内容 def getContent(self, page): # 匹配所有楼层的内容 contents1 = [] contents2 = [] soup = BeautifulSoup(page) #获取帖子发布时间 time = soup.select(\u0026#39;div[class=\u0026#34;post-tail-wrap\u0026#34;]\u0026#39;) for ii in time: texts = ii.get_text(\u0026#39; \u0026#39;) #将无用信息去除掉 texts2 = texts.rjust(80).replace(u\u0026#39;举报 | 侵权举报 有害信息举报 \u0026#39;, \u0026#39;\u0026#39;) contents1.append(texts2 + \u0026#39;\\n\u0026#39; + \u0026#39;\\n\u0026#39; + \u0026#39;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\u0026#39;) # 提取正文内容 items = soup.select(\u0026#39;cc\u0026#39;) for iii in items: contents2.append(iii.get_text().encode(\u0026#39;utf8\u0026#39;).lstrip()) #将两个list合并为一个list 重叠合并 contents = list(chain.from_iterable(zip(contents2, contents1))) return contents # 向文件写入每一楼的信息 def writeData(self, contents): for item in contents: self.file.write(item+\u0026#39;\\n\u0026#39;+\u0026#39;\\n\u0026#39;+\u0026#39;\\n\u0026#39;) def start(self): indexPage = self.getPage(1) pageNum = self.getPageNum(indexPage) title = self.getTitle(indexPage) self.setFileTitle(title) if pageNum == None: print \u0026#34;URL已失效，请重试\u0026#34; return try: print \u0026#34;该帖子共有\u0026#34; + str(pageNum) + \u0026#34;页\u0026#34; for i in range(1, int(pageNum) + 1): print \u0026#34;正在写入第\u0026#34; + str(i) + \u0026#34;页数据\u0026#34; page = self.getPage(i) contents = self.getContent(page) self.writeData(contents) # 出现写入异常 except IOError, e: print \u0026#34;写入异常，原因\u0026#34; + e.message finally: print \u0026#34;写入任务完成\u0026#34; print u\u0026#34;请输入帖子代号\u0026#34; baseURL = \u0026#39;http://tieba.baidu.com/p/\u0026#39; + str(raw_input(u\u0026#39;http://tieba.baidu.com/p/\u0026#39;)) seeLZ = raw_input(u\u0026#34;是否只获取楼主发言，是输入1，否输入0\\n\u0026#34;) bdtb = Tieba(baseURL, seeLZ) bdtb.start() 相比较正则表达式而言，soup更加清晰明了，也更便于操作。\n","date":"2016-09-26T10:00:47+08:00","permalink":"https://blog.shineee.site/p/2016/09/26/python-spiders-improved/","title":"改进的Python贴吧爬虫代码"}]